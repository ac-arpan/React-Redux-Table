{"version":3,"sources":["redux/table/tableAction.js","components/Table.js","redux/table/tableReducer.js","redux/rootReducer.js","redux/store.js","App.js","serviceWorker.js","index.js","redux/table/tableTypes.js"],"names":["fetchTableData","dispatch","console","log","type","FETCH_TABLE_DATA_REQUEST","axios","get","then","res","data","FETCH_TABLE_DATA_SUCCESS","payload","catch","err","error","message","FETCH_TABLE_DATA_FAILURE","connect","state","tableData","table","useEffect","columns","Header","style","textAlign","fontSize","accessor","sortable","filterable","loading","className","border","maxHeight","showPageSizeOptions","defaultpageSize","pageSizeOptions","require","initialState","erorr","tableReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6a27ad1.chunk.js","sourcesContent":["import { FETCH_TABLE_DATA_REQUEST, FETCH_TABLE_DATA_SUCCESS, FETCH_TABLE_DATA_FAILURE } from \"./tableTypes\"\r\nimport axios from 'axios'\r\n\r\nexport const fetchTableDataRequest = () => {\r\n    return {\r\n        type: FETCH_TABLE_DATA_REQUEST\r\n    }\r\n}\r\n\r\nexport const fetchTableDataSuccess = data => {\r\n    return {\r\n        type: FETCH_TABLE_DATA_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const fetchTableDataFailure = error => {\r\n    return {\r\n        type: FETCH_TABLE_DATA_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const fetchTableData = () => {\r\n    return (dispatch) => {\r\n        console.log('I am in');\r\n        dispatch(fetchTableDataRequest())\r\n        axios.get(\"https://restcountries.eu/rest/v2/all\")\r\n            .then(res => dispatch(fetchTableDataSuccess(res.data)))\r\n            .catch(err => dispatch(fetchTableDataFailure(err.message)))\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { connect } from 'react-redux'\r\n\r\nimport ReactTable from \"react-table-6\";\r\nimport 'react-table-6/react-table.css';\r\nimport { fetchTableData } from '../redux';\r\n\r\nfunction Table({ fetchTableData, tableData }) {\r\n    // const [data, setData] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetchTableData()\r\n    }, [])\r\n    // console.log(data);\r\n\r\n    const columns = [\r\n        {\r\n            Header: () => (\r\n                <div\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        fontSize: '20px'\r\n                    }}\r\n                >Name</div>),\r\n            accessor: 'name',\r\n            sortable: false,\r\n            filterable: true\r\n        },\r\n        {\r\n            Header: () => (\r\n                <div\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        fontSize: '20px'\r\n                    }}\r\n                >Capital</div>),\r\n            accessor: 'capital',\r\n            sortable: false,\r\n            filterable: true\r\n        },\r\n        {\r\n            Header: () => (\r\n                <div\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        fontSize: '20px'\r\n                    }}\r\n                >Region</div>),\r\n            accessor: 'region',\r\n            sortable: false,\r\n            filterable: true\r\n        },\r\n        {\r\n            Header: () => (\r\n                <div\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        fontSize: '20px'\r\n                    }}\r\n                >Sub Region</div>),\r\n            accessor: 'subregion',\r\n            sortable: false,\r\n            filterable: true\r\n        },\r\n        {\r\n            Header: () => (\r\n                <div\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        fontSize: '20px'\r\n                    }}\r\n                >Population</div>),\r\n            accessor: 'population'\r\n        },\r\n        {\r\n            Header: () => (\r\n                <div\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        fontSize: '20px'\r\n                    }}\r\n                >Native Name</div>),\r\n            accessor: 'nativeName'\r\n        },\r\n    ]\r\n    return tableData.loading\r\n        ? (\r\n            <h2>Loading...</h2>\r\n        )\r\n        : tableData.error\r\n            ? (\r\n                <h2>{tableData.error}</h2>\r\n            )\r\n            : (\r\n                <div className=\"table\">\r\n                    <ReactTable style={{ border: '2px solid black', maxHeight: '80vh' }}\r\n                        data={tableData.data}\r\n                        columns={columns}\r\n                        showPageSizeOptions={true}\r\n                        defaultpageSize={5}\r\n                        pageSizeOptions={[5, 10, 15, 20]}\r\n                    />\r\n                </div>\r\n            )\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tableData: state.table\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchTableData: () => dispatch(fetchTableData())\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Table)\r\n","const { FETCH_TABLE_DATA_REQUEST, FETCH_TABLE_DATA_SUCCESS, FETCH_TABLE_DATA_FAILURE } = require(\"./tableTypes\")\r\n\r\nconst initialState = {\r\n    loading : false,\r\n    data:[],\r\n    erorr : ''\r\n}\r\n\r\nconst tableReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case FETCH_TABLE_DATA_REQUEST: return {\r\n            ...state,\r\n            loading:true\r\n        }\r\n        case FETCH_TABLE_DATA_SUCCESS : return {\r\n            ...state,\r\n            loading:false,\r\n            data:action.payload,\r\n            error:''\r\n        }\r\n        case FETCH_TABLE_DATA_FAILURE : return {\r\n            ...state,\r\n            loading:false,\r\n            data:[],\r\n            error:action.payload\r\n        }\r\n        default : return state\r\n    }\r\n}\r\n\r\nexport default tableReducer","import {combineReducers} from 'redux'\r\n\r\nimport tableReducer from './table/tableReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n    table : tableReducer\r\n})","import {createStore, applyMiddleware} from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk'\r\nimport { rootReducer } from './rootReducer'\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\nfunction App() {\n  \n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Table/>\n      </div>\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const FETCH_TABLE_DATA_REQUEST = 'FETCH_TABLE_DATA_REQUEST'\r\nexport const FETCH_TABLE_DATA_SUCCESS = 'FETCH_TABLE_DATA_SUCCESS'\r\nexport const FETCH_TABLE_DATA_FAILURE = 'FETCH_TABLE_DATA_FAILURE'"],"sourceRoot":""}